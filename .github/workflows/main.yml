# .github/workflows/deploy-ec2.yml (예시)
name: Build and Deploy to EC2

# 워크플로를 트리거하는 조건 설정
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) 리포지토리 체크아웃
      - name: Checkout
        uses: actions/checkout@v2
        # 의미: GitHub Actions 환경에서 현재 리포지토리의 코드를 다운받음

      # 2) 자바 환경 세팅 (여기서는 예시로 JDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
        # 의미: GitHub Actions의 가상머신에 자바 17 설치

      # 3) Gradle 빌드 (Spring Boot 프로젝트)
      - name: Build with Gradle
        run: |
          ./gradlew clean build
        # 의미: Gradle을 사용해 프로젝트를 빌드. 
        # 빌드 실패 시 여기서 워크플로가 바로 실패(오류) 처리됨.

      # 4) EC2 서버로 JAR 파일 복사 (SCP)
      - name: Copy to EC2 via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          # EC2의 퍼블릭 IP 혹은 도메인
          host: ${{ secrets.EC2_HOST }}
          # EC2에 접속할 사용자명 (예: ubuntu, ec2-user 등)
          username: ubuntu
          # GitHub Secrets에 등록해둔 SSH 개인키
          key: ${{ secrets.EC2_SSH_KEY }}
          # 빌드 산출물 (Gradle 빌드 결과물 위치)
          source: "build/libs/*.jar"
          # EC2에 저장할 위치
          target: "~/myapp.jar"
        # 의미: 로컬(Actions 환경)에서 빌드된 JAR을 EC2 홈 디렉토리에 myapp.jar 이름으로 업로드

      # 5) SSH 접속 후 서버에서 애플리케이션 실행
      - name: SSH to EC2 and run
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 기존 프로세스가 있으면 종료 (myapp.jar로 실행된 프로세스를 잡아서 kill)
            pkill -f myapp.jar || true

            # 백그라운드 실행 (nohup) + 로그 출력 리다이렉션
            nohup java -jar myapp.jar > app.log 2>&1 &
        # 의미: SSH로 연결해 기존 프로세스를 내리고, 새 JAR을 실행
