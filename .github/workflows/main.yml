name: Build and Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: mydb
          POSTGRES_USER: kss
          POSTGRES_PASSWORD: root
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U kss -d mydb"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1️⃣ 리포지토리 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2️⃣ JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3️⃣ Gradle 실행 권한 부여
      - name: Ensure gradlew is executable
        run: chmod +x gradlew

      # 4️⃣ Gradle 빌드
      - name: Build with Gradle
        run: |
          ./gradlew clean build
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/mydb
          SPRING_DATASOURCE_USERNAME: kss
          SPRING_DATASOURCE_PASSWORD: root

      # 5️⃣ 빌드된 JAR 파일명 가져오기
      - name: Get JAR filename
        id: get_jar
        run: echo "JAR_NAME=$(ls build/libs/gaia-*.jar | grep -v plain | head -n 1)" >> $GITHUB_ENV

      # 6️⃣ EC2에 JAR 파일 업로드 (`gaia.jar`로 이름 변경)
      - name: Upload JAR to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "${{ env.JAR_NAME }}"
          target: "/home/ubuntu/gaia.jar"

      # 7️⃣ EC2에서 기존 서버 종료 후 새 JAR 실행
      - name: SSH to EC2 and Run Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            export JAR_PATH="/home/ubuntu/gaia.jar"
            PID=$(pgrep -f "$JAR_PATH")

            # 기존 애플리케이션 종료 (안전한 종료 방식)
            if [ -n "$PID" ]; then
              echo "Stopping existing application..."
              kill -15 "$PID"
              sleep 5
              if ps -p "$PID" > /dev/null; then
                echo "Force killing application..."
                kill -9 "$PID"
              fi
            else
              echo "No existing application found. Skipping termination."
            fi

            # JAR 파일이 존재하는지 확인
            if [ ! -f "$JAR_PATH" ]; then
              echo "ERROR: JAR file not found at $JAR_PATH"
              exit 1
            fi

            # 새 JAR 실행
            echo "Starting new application..."
            nohup java -jar "$JAR_PATH" > /home/ubuntu/app.log 2>&1 &

            # 실행된 프로세스 확인
            sleep 5
            NEW_PID=$(pgrep -f "$JAR_PATH")
            if [ -n "$NEW_PID" ]; then
              echo "Application started successfully! PID: $NEW_PID"
            else
              echo "Application failed to start!"
              exit 1
            fi
